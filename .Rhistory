#| warning: FALSE
#| message: FALSE
library(dplyr)
library(tidyverse)
library(skimr)
library(scales)
library(flextable)
library(mice)
library(naniar)
library(flextable)
library(gt)
library(magick)
library(grid)
library(ggplot2)
library(lubridate)
library(gtExtras)
library(maps)
library(usdata)
library(plotly)
library(ggplot2)
census_data <- read.csv("https://raw.githubusercontent.com/dilernia/STA418-518/main/Data/census_data_state_2008-2023.csv")
elections_data <- read.csv("https://raw.githubusercontent.com/dilernia/STA418-518/main/Data/countypres_2000-2020.csv")
president_birthdays<- read.csv("https://people.math.sc.edu/Burkardt/datasets/presidents/president_birthdays.csv")
#Converting Name variable to uppercase letters.
president_birthdays<-president_birthdays |>
mutate(Name = str_to_upper(Name))
#Subsetting elections data to acquire only aggregations for the candidate that had majority of votes in every state for the 2016 presidential general elections.
lead_elections_2016 <- elections_data |>
filter(year == 2016) |>
select(year, state, state_po, office, candidate, party, candidatevotes, totalvotes) |>
group_by(state, candidate) |>
summarise(
year = first(year),
state_po = first(state_po),
candidate = first(candidate),
candidate_votes = sum(candidatevotes, na.rm = TRUE),
total_votes = sum(totalvotes, na.rm = TRUE)
) |>
ungroup() |>
arrange(state, desc(candidate_votes)) |>
filter(candidate_votes == max(candidate_votes), .by = state) # Relative majority filtering for the canidate that had majority of the votes per state.
#Subsetting census data to acquire only census data form 2016.
census_data_2016<-census_data |>
filter(year == 2016)
census_data_2016 <-census_data_2016 |>
dplyr::mutate(county_state = str_to_upper(county_state)) |>
rename(state = county_state) #renaming the coutny_state to state because the column represents the state.
composite_data_2016 <- census_data_2016 |>
left_join(lead_elections_2016, by = "state" )
#joining data and creating a new variable named poverty_category for plotting a map.
#Merging elections_data with president_birthdays data.
presidents <- elections_data |>
left_join(president_birthdays, by = c("candidate" = "Name"))
#Getting U.S. state level map data
states_map <- map_data("state")
# Merge map data with composite_data_2016
composite <- composite_data_2016 |>
mutate(state = str_to_lower(state))
merged_data <- composite |>
left_join(states_map, by = c("state" = "region"))
#Creating a new variable named social_wealth_class
lower <- min(merged_data$prop_poverty, na.rm = TRUE)
upper <- max(merged_data$prop_poverty, na.rm = TRUE)
range_width <- upper - lower
break1 <- lower + range_width / 3
break2 <- lower + 2 * range_width / 3
merged_data <- merged_data |>
mutate(
social_wealth_class = case_when(
prop_poverty <= break1 ~ "Upper Class",
prop_poverty <= break2 ~ "Middle Class",
TRUE ~ "Lower Class"
)
)
#Alabama subset
alabama_data <- elections_data |>
filter(county_name == "AUTAUGA")
#Cleaning and extracting first and second names, excluding NAs
candidate_names <- alabama_data |>
filter(!is.na(candidate) & candidate != "") |>
mutate(candidate = str_replace_all(candidate, ",", "")) |>
mutate(candidate = str_to_title(candidate)) |>
mutate(name_parts = str_split(candidate, "\\s+")) |>
unnest(name_parts) |>
group_by(candidate) |>
mutate(name_position = row_number()) |>
ungroup()
#Extracting first names, excluding NAs and commas
first_names <- alabama_data |>
filter(!is.na(candidate) & candidate != "") |>
mutate(candidate = str_replace_all(candidate, ",", "")) |>
mutate(first_names = word(str_to_title(candidate), 1)) |>
count(first_names, sort = TRUE)
first_names|>
head(10)
# creating first_name column and birthdate column
president_birthdays <- president_birthdays |>
mutate(
first_name = str_to_upper(word(str_trim(Name), 1)),
birthdate = make_date(Year, Month, Day)
)
# Filter to Donald Trump to get birthdate
trump_birthday <- president_birthdays |>
filter(first_name == "DONALD") |>
select(Name, birthdate)
trump_birthday
# calculate age
president_birthdays <- president_birthdays |>
mutate(
first_name = str_to_upper(word(str_trim(Name), 1)),
birthdate = make_date(Year, Month, Day),
age_years = floor(interval(birthdate, today()) / years(1))
)
# 5 youngest presidents
youngest_presidents <- president_birthdays |>
arrange(desc(birthdate)) |>
slice_head(n=4)|>
select(Name, birthdate, age_years)
youngest_presidents
#Finding description and short summary statistics of the census_data dataset.
skim(census_data)
gg_miss_var(census_data, show_pct = TRUE) + labs(title = "Percentage of missigness for census data")
#Finding description and short summary statistics of the census_data dataset.
skim(elections_data)
gg_miss_var(elections_data, show_pct = TRUE) + labs(title = "Percentage missingness for elections dataset")
#Finding average monthly home cost and monthly rent cost per state
census_data |>
group_by(county_state) |>
summarize(average_monthly_home_cost  = round(mean(median_monthly_home_cost, na.rm = TRUE),2),
average_monthly_rent =  round(mean(median_monthly_rent_cost, na.rm = TRUE))) |>
ungroup() |>
arrange(desc(average_monthly_home_cost)) |>
slice_head(n = 5) |>
flextable() |>
theme_vanilla() |>
add_header_lines("Top 5 states by average monthly home cost and monthly rent (2008-2023)")
#Summarizing average poverty proportion by state.
census_data |>
group_by(county_state) |>
summarize(average_poverty_proportion  = round(mean(prop_poverty,na.rm = TRUE),2),
average_monthly_home_cost  = round(mean(median_monthly_home_cost, na.rm = TRUE),2),
average_monthly_rent =  round(mean(median_monthly_rent_cost, na.rm = TRUE),2)) |>
ungroup() |>
arrange(desc(average_poverty_proportion)) |>
slice_head(n = 5) |>
gt::gt() |>
gt_theme_pff() |>
gt::tab_caption("Top 5 states by average poverty proportion average monthly home cost and rent cost (2008-2023)")
#creating a categorical variable named social wealth class which groups the proportions of poverty.
lower <- min(census_data$prop_poverty, na.rm = TRUE)
upper <- max(census_data$prop_poverty, na.rm = TRUE)
range_width <- upper - lower
break1 <- lower + range_width / 3
break2 <- lower + 2 * range_width / 3
census_data <- census_data |>
mutate(
social_wealth_class = case_when(
prop_poverty <= break1 ~ "Upper Class",
prop_poverty <= break2 ~ "Middle Class",
TRUE ~ "Lower Class"
)
)
#Scatterplot of median monthly rent cost vs median monthly home cost.
census_data |>
ggplot(aes(x =median_monthly_home_cost,
y = median_monthly_rent_cost,
color = social_wealth_class,size = social_wealth_class)) + geom_point(alpha = 0.5)+
scale_color_viridis_d(guide = "legend")+
labs(title = "Graph of median monthly rent vs median monthly home cost",
x = "Median monthly home cost($)",
y = "Median monthly rent cost($)",
caption = "Data Source: TidyCensus R & United states Census website") +
theme_bw() +
theme(legend.position = "bottom")
#Barchart of monthly home ownership and rental costs.
census_data |>
group_by(county_state) |>
summarize(
average_monthly_home_cost = mean(median_monthly_home_cost, na.rm = TRUE),
average_monthly_rent = mean(median_monthly_rent_cost, na.rm = TRUE)
) |>
ungroup() |>
arrange(desc(average_monthly_home_cost)) |>
slice_head(n = 10) |>
pivot_longer(
cols = c(average_monthly_home_cost, average_monthly_rent),
names_to = "cost_type",
values_to = "value"
) |>
mutate(county_state = factor(county_state, levels = unique(county_state))) |>
ggplot(aes(x = county_state, y = value, fill = cost_type)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_viridis_d() +
labs(
title = "Top 10 Counties by Average Monthly Home and Rent Costs",
x = "State",
y = "Average Monthly Cost ($)",
caption = "Data Source: TidyCensus R & United States Census website"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom"
)
census_data |>
select(year, population) |>
filter(!is.na(year), !is.na(population)) |>
group_by(year) |>
summarise(population = sum(population, na.rm = TRUE)) |>
ggplot(aes(x = year, y = population)) +
geom_line(color = "#B22234", linewidth = 1) +
geom_point(color = "#B22234", size = 3) +
scale_y_continuous(labels = scales::comma) +
scale_x_continuous(breaks = unique(census_data$year)) +
labs(
title = "Population over time",
x = "Year",
y = "Population",
caption = "Data Source: TidyCensus R & United states Census website"
)+
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)
)
# Importing the American flag and adjusting transparency
american_flag <- image_read("https://media.istockphoto.com/id/116768830/vector/american-flag-flowing-in-the-wind.jpg?s=2048x2048&w=is&k=20&c=EKhxFOKDvBeAMloZIo375whKytu_WzU62oIVz9H2tEM=") |>
image_colorize(opacity = 50, color = "white") # Add 50% white overlay for transparency
# Convert the image to a raster object
flag_raster <- rasterGrob(as.raster(american_flag), width = unit(1, "npc"), height = unit(1, "npc"))
# Data manipulation
data_summary <- composite_data_2016 |>
select(state, candidate, candidate_votes) |>
group_by(state) |>
filter(candidate_votes == max(candidate_votes)) |>
ungroup() |>
count(candidate)
# Calculate the maximum value for 'n'
max_n <- data_summary$n |> max()
# Plotting
data_summary |>
ggplot(aes(x = candidate, y = n, fill = candidate)) +
annotation_custom(flag_raster, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
geom_col() +
geom_text(aes(label = n), vjust = -0.5, colour = "red", fontface = "bold") + # Text labels in red and bold
scale_y_continuous(expand = c(0, 0), limits = c(0, max_n * 1.1)) + # Add 10% padding to the top
scale_fill_manual(
values = c(
"HILLARY CLINTON" = "#002147", # Royal blue for Hillary Clinton
"DONALD TRUMP" = "#B22234"    # Orange-red for Donald Trump
)
) +
labs(
title = "Number of states Won by each candidate (2016)",
x = "",
y = "Number of States",
fill = "Candidate",
caption = "Data Source: Massachusetts Institute of Technology website"
) +
theme_minimal() +
theme(
legend.position = "bottom", # Move legend to the bottom
text = element_text(face = "bold") # Set all text elements to bold
)
lead_elections_2016 <- elections_data |>
filter(year == 2016) |>
select(year, state, state_po, office, candidate, party, candidatevotes, totalvotes) |>
group_by(state, candidate) |>
summarise(
year = first(year),
state_po = first(state_po),
candidate = first(candidate),
candidate_votes = sum(candidatevotes, na.rm = TRUE),
total_votes = sum(totalvotes, na.rm = TRUE)
) |>
ungroup() |>
arrange(state, desc(candidate_votes)) |>
filter(candidate_votes == max(candidate_votes), .by = state)
census_data_2016 <- census_data |>
filter(year == 2016) |>
mutate(county_state = str_to_upper(county_state)) |>
rename(state = county_state)
composite_data_2016 <- census_data_2016 |>
left_join(lead_elections_2016, by = "state")
states_map <- map_data("state")
composite <- composite_data_2016 |>
mutate(state = str_to_lower(state))
merged_data <- left_join(states_map, composite, by = c("region" = "state"))
labels <- merged_data |>
group_by(region) |>
summarise(
lon = mean(range(long)),
lat = mean(range(lat)),
state_po = first(state_po)
)
wealth_classes <- ggplot(merged_data, aes(x = long, y = lat, group = group, fill = candidate, text = region)) +
geom_polygon(color = "black", size = 0.3) +
coord_fixed(1.3) +
scale_fill_manual(
values = c("DONALD TRUMP" = "#B22234", "HILLARY CLINTON" = "#002147"),
name = "candidate") +
labs(
title = "Presidential Elections Winners By State (2016)",
caption = "Data Source: TidyCensus & US Maps"
) +
theme_minimal() +
theme(legend.position = "bottom") +
geom_text(
data = labels,
aes(x = lon, y = lat, label = state_po),
color = "black",
size = 2.5,
inherit.aes = FALSE
)
# Convert to interactive plot
ggplotly(wealth_classes, tooltip = c("text", "fill"))
#reshaping the data to be used in performing the test
census_income <- census_data |>
filter(year %in% c(2016, 2023)) |>
select(county_state,year, median_income) |>
mutate(year = as.character(year))|>
group_by(county_state,year) |>
summarise(median_income = median(median_income, na.rm = TRUE)) |>
ungroup()
#side by side boxplot to display income differences.
census_income |>
ggplot(aes(x = year, y = median_income,
fill = year)) +
stat_boxplot(geom = "errorbar", width = 0.2, coef = 1.5) +
stat_boxplot(geom = "boxplot", width = 0.5, coef = 1.5,
outlier.shape = 8) +
stat_summary(fun = "mean", geom = "point", shape = 23, fill = "black",
color = "white") +
scale_fill_manual(values = c("#009E73", "#56B4E9")) +
scale_y_continuous(labels = scales::comma) +
coord_flip() +
labs(y = "Median salary",
title = "Comparison of median salary") +
theme(legend.position = "none")
#Reordering factor levels for t-test
census_income <- census_income |>
dplyr::mutate(year = fct_relevel(year, "2023", "2016"))
# Two-sample t-test
ttest_output <- t.test(formula = median_income ~ year,
data = census_income,
alternative = "greater")
# Display results of t-test
ttest_output |>
broom::tidy() |>
flextable() |>
colformat_double(digits = 3) |>
set_formatter(p.value = function(x) {format.pval(x, digits = 3)}) |>
set_caption("Results of two-sample t-test comparing median income between 2023 and 2016.") |>
autofit() |>
fit_to_width(max_width = 7)
# Calculating standard deviations and variances for each group
census_income |>
group_by(year) |>
summarize(Mean = mean(median_income),
n = n(),
SD = sd(median_income))|>
flextable() |>
colformat_double(digits = 3) |>
autofit()
#Number of permutations to compute
number_permutations <- 1000
# Instantiating vector for test statistics
permutation_stats <- vector(length = number_permutations)
# Calculating t-test statistic for each permutation
for(p in 1:number_permutations) {
permutation_stats[p] <- t.test(formula = median_income ~ year,
alternative = "greater",
data = census_income |>
mutate(year = sample(year, replace = FALSE))) |>
broom::tidy() |>
pull(statistic)
}
# organizing into a tibble.
tidy_stats <- tibble(value = permutation_stats)
#creating a histogram.
tidy_stats |>
ggplot(aes(x = value)) +
geom_histogram(color= "white" , aes(y = after_stat(density))) +
geom_density(color = "turquoise", linewidth = 1)+
stat_function(fun = function(x) dt(x, df = ttest_output$parameter),
color = "violet", linewidth = 1)+
scale_y_continuous(expand = expansion(mult = c(0,0.1))) +
geom_vline(xintercept = quantile(permutation_stats, probs = 0.95), color = "red", linetype = "solid") +
theme_minimal() +
geom_vline(xintercept = ttest_output$statistic, color = "blue", linetype = "solid")+
labs(title = "Randomization test null distribution",
x = "Test statistic",
y = "Frequency")
#Calculating the p-value for the greater than test
janitor::tabyl(permutation_stats > ttest_output$statistic)
